syntax = "proto2";

package bazel_rules_hdl.ppa;

message PerformancePowerAreaResultProto {
  // ====== Power: Total ======
  // The unit scale such as micro (u), nano (n), etc.
  optional string power_magnitude = 5;
  // The internal power simulated
  optional float total_internal_package_power_watts = 1;
  // The switching power simulated
  optional float total_switching_package_power_watts = 2;
  // The leakage power simulated
  optional float total_leakage_package_power_watts = 3;
  // The total power simulated
  optional float total_total_package_power_watts = 4;

  // ====== Power: Sequential ======
  // The internal power simulated
  optional float sequential_internal_package_power_watts = 16;
  // The switching power simulated
  optional float sequential_switching_package_power_watts = 17;
  // The leakage power simulated
  optional float sequential_leakage_package_power_watts = 18;
  // The total power simulated
  optional float sequential_total_package_power_watts = 19;

  // ====== Power: Combinational ======
  // The internal power simulated
  optional float combinational_internal_package_power_watts = 20;
  // The switching power simulated
  optional float combinational_switching_package_power_watts = 21;
  // The leakage power simulated
  optional float combinational_leakage_package_power_watts = 22;
  // The total power simulated
  optional float combinational_total_package_power_watts = 23;

  // ====== Power: Macro ======
  // The internal power simulated
  optional float macro_internal_package_power_watts = 24;
  // The switching power simulated
  optional float macro_switching_package_power_watts = 25;
  // The leakage power simulated
  optional float macro_leakage_package_power_watts = 26;
  // The total power simulated
  optional float macro_total_package_power_watts = 27;

  // ====== Power: Pad ======
  // The internal power simulated
  optional float pad_internal_package_power_watts = 28;
  // The switching power simulated
  optional float pad_switching_package_power_watts = 29;
  // The leakage power simulated
  optional float pad_leakage_package_power_watts = 30;
  // The total power simulated
  optional float pad_total_package_power_watts = 31;

  // ====== Area ======
  // The die area in um^2.
  optional float area_micro_meters_squared = 6;
  // The die area utilization percentage.
  optional float area_utilization_percentage = 7;
  // The die height in micro meters.
  optional float die_height_micro_meters = 32;
  // The die width in micro meters.
  optional float die_width_micro_meters = 33;
  // The total number of standard cells.
  optional int32 num_total_cells = 34;
  // The number of non-timing buffers.
  optional int32 num_buffers = 35;
  // The number of timing buffers.
  optional int32 num_timing_buffers = 36;
  // The number of flops.
  optional int32 num_flops = 37;
  // The number of combinational gates.
  optional int32 num_combinational_gates = 38;

  // ====== Performance ======
  // The worst slack min.
  optional float worst_slack_min = 9;
  // The worst slack max.
  optional float worst_slack_max = 10;
  // The total negative slack max.
  optional float total_negative_slack_max = 11;
  // The clock skew.
  optional float clock_skew = 12;
  // The number of cells in the longest topological path.
  optional int32 longest_topological_path = 39;
  // The count of max slew violations.
  optional float max_slew_violations = 13;
  // The count of max fanout violations.
  optional float max_fanout_violations = 14;
  // The count of max capacitance violations.
  optional float max_capacitance_violations = 15;
}
